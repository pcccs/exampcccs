A) Write an Android program to perform Zoom In, Zoom Out operation and display Satellite view, on Google Map.



MainActivity.java
package com.example.mygooglemap;
import androidx.fragment.app.FragmentActivity;
import android.os.Bundle;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.example.mygooglemap.databinding.ActivityMapsBinding;
public class MapsActivity extends FragmentActivity implements
OnMapReadyCallback {
private GoogleMap mMap;
private ActivityMapsBinding binding;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
binding = ActivityMapsBinding.inflate(getLayoutInflater());
setContentView(binding.getRoot());
// Obtain the SupportMapFragment and get notified when the map is ready
to be used.
SupportMapFragment mapFragment = (SupportMapFragment)
getSupportFragmentManager()
.findFragmentById(R.id.map);
mapFragment.getMapAsync(this);
}
/**
* Manipulates the map once available.
* This callback is triggered when the map is ready to be used.
* This is where we can add markers or lines, add listeners or move the camera.
In this case,
* we just add a marker near Sydney, Australia.
* If Google Play services is not installed on the device, the user will be
prompted to install
* it inside the SupportMapFragment. This method will only be triggered once
the user has
* installed Google Play services and returned to the app.
*/
@Override
public void onMapReady(GoogleMap googleMap) {
mMap = googleMap;
// Add a marker in Sydney and move the camera
LatLng sydney = new LatLng(-34, 151);
mMap.addMarker(new MarkerOptions().position(sydney).title("Marker in
Sydney"));
mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));
mMap.setMapType(mMap.MAP_TYPE_SATELLITE);
}
}
AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.mygooglemap">
<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.MyGoogleMap">
<!--
TODO: Before you run your application, you need a Google Maps API key.
To get one, follow the directions here:
https://developers.google.com/maps/documentation/android-sdk/getapi-
key
Once you have your API key (it starts with "AIza"), define a new property in
your
project's local.properties file (e.g. MAPS_API_KEY=Aiza...), and replace the
"YOUR_API_KEY" string in this file with "${MAPS_API_KEY}".
-->
<meta-data
android:name="com.google.android.geo.API_KEY"
android:value="MAPS_API_KEY" />
<activity
android:name=".MapsActivity"
android:exported="true"
android:label="@string/title_activity_maps">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>
Local.properties
## This file is automatically generated by Android Studio.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
# This file should *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
# Location of the SDK. This is only used by Gradle.
# For customization when using a Version Control System, please read the
# header note.
sdk.dir=C\:\\Users\\ADMIN\\AppData\\Local\\Android\\Sdk
MAPS_API_KEY=AIzaSyDjPstkPhW4mCenL5AkV_t-yQsXwyQRFoY





B) Create an Android application, where the user can enter player name and points in one view and display it in another view.




Activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<TableLayout xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:gravity="center"
tools:context=".MainActivity">
<TableRow>
<TextView
android:id="@+id/name"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:textSize="25dp"
android:text="Name" />
<EditText
android:id="@+id/PlayerName"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:ems="15"
android:hint="Name"/>
</TableRow>
<TableRow>
<TextView
android:id="@+id/point"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Points"
android:textSize="25dp"
tools:layout_editor_absoluteX="49dp"
tools:layout_editor_absoluteY="134dp" />
<EditText
android:id="@+id/Playerpoint"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:hint="point"
android:ems="10"/>
</TableRow>
<TableRow>
<Button
android:id="@+id/button"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Send"
android:layout_gravity="center"
tools:layout_editor_absoluteX="138dp"
tools:layout_editor_absoluteY="257dp" />
</TableRow>
</TableLayout>
MainActivty.java
package com.example.myplayer;
import androidx.appcompat.app.AppCompatActivity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
public class MainActivity extends AppCompatActivity {
EditText Playername,Playerpoint;
Button send;
String name;
int points;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
Playername = findViewById(R.id.PlayerName);
Playerpoint = findViewById(R.id.Playerpoint);
send = findViewById(R.id.button);
send.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View view) {
sendData();
}
});
}
public void sendData()
{
name = Playername.getText().toString().trim();
points = Integer.parseInt(Playerpoint.getText().toString().trim());
Intent i = new Intent(MainActivity.this,SecondActivity.class);
i.putExtra(SecondActivity.PlayerName,name);
i.putExtra(SecondActivity.Points,points);
startActivity(i);
}
}
Activity_second.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:gravity="center"
tools:context=".SecondActivity">
<TextView
android:id="@+id/pname"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="TextView"
tools:layout_editor_absoluteX="160dp"
tools:layout_editor_absoluteY="16dp" />
<TextView
android:id="@+id/point"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:layout_marginTop="20dp"
android:text="TextView"
tools:layout_editor_absoluteX="160dp" />
</LinearLayout>
SecondActivity.java
package com.example.myplayer;
import androidx.appcompat.app.AppCompatActivity;
import android.content.Intent;
import android.os.Bundle;
import android.widget.TextView;
public class SecondActivity extends AppCompatActivity {
public static final String PlayerName = "PlayerName";
public static final String Points = "Points";
private TextView pname,ppoint;
private String name;
private int point;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_second);
pname = findViewById(R.id.pname);
ppoint = findViewById(R.id.point);
Intent i = getIntent();
name = i.getStringExtra(PlayerName);
point = i.getIntExtra(Points,0);
pname.setText("Player Name: "+name);
ppoint.setText("Player Points: "+point);
}
}

