

A) Write a C program to Identify the type (Directory, character device, Block device, Regular file, FIFO or pipe, symbolic link or socket) of given file using stat() system call.


#include
#include
#include
#include
#include
<sys/types.h>
<sys/stat.h>
<time.h>
<stdio.h>
<stdlib.h>
int main(int argc, char *argv[]) {
struct stat info;
if (argc != 2) {printf("Enter filename\n");
}
if (stat(argv[1], &info) == -1) {
printf("stat erro");
exit(EXIT_FAILURE);
}
printf("I-node number:
%ld\n", (long) info.st_ino);
printf("File size:
%lld bytes\n",(long long) info.st_size);
printf("Last file access:
%s", ctime(&info.st_atime));
printf("Last file modification:
%s", ctime(&info.st_mtime));
printf("No of hard links: %d\n",info.st_nlink);
printf("File Permissions: \t");
printf(
printf(
printf(
printf(
printf(
printf(
printf(
printf(
printf(
(info.st_mode
(info.st_mode
(info.st_mode
(info.st_mode
(info.st_mode
(info.st_mode
(info.st_mode
(info.st_mode
(info.st_mode
&
&
&
&
&
&
&
&
&
S_IRUSR)
S_IWUSR)
S_IXUSR)
S_IRGRP)
S_IWGRP)
S_IXGRP)
S_IROTH)
S_IWOTH)
S_IXOTH)
?
?
?
?
?
?
?
?
?
"r"
"w"
"x"
"r"
"w"
"x"
"r"
"w"
"x"
:
:
:
:
:
:
:
:
:
"-");
"-");
"-");
"-");
"-");
"-");
"-");
"-");
"-");
putchar('\n');
}







B) Write a C program which creates a child process and child process catches a signal SIGHUP, SIGINT and SIGQUIT. The Parent process send a SIGHUP or SIGINT signal after every 3 seconds, at the end of 15 second parent send SIGQUIT signal to child and child terminates by displaying message "My Papa has Killed me!!!‚Äù.


#include<stdio.h>
#include<signal.h>
#include<stdlib.h>
void sighup();
void sigint();
void sigquit();
main()
{
int pid,i,j,k;
if ((pid = fork() ) < 0)
{
perror("fork");
exit(1);
}
if ( pid == 0)
{
signal(SIGHUP,sighup);
signal(SIGINT,sigint);
signal(SIGQUIT,sigquit);
for(;;);
}
else
{
j=0;
for(i=1;i<=5;i++)
{
j++;
printf("PARENT: sending SIGHUP Signal : %d\n",j);
kill(pid,SIGHUP);
sleep(3);
printf("PARENT: sending signal : %d\n",j);
kill (pid,SIGINT);
sleep(3);
}
sleep(3);
printf("Parent sending SIGQUIT\n");
kill(pid,SIGQUIT);
}
}
void sighup()
{
signal(SIGHUP,sighup);
printf("Child: I have received sighup\n");
}
void sigint()
{
signal(SIGINT,sigint);
printf("Child: I have received sighINT\n");
}
void sigquit()
{
printf("My daddy has killed me\n");
exit(0);
}
